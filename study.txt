[필기장]

🌟테스트 코드를 잘 짜는게 매우 중요하다. 개발을 잘 하는 사람일수록 테스트 케이스를 잘 작성한다. 현업들의 시간을 100으로 보면 70~80은 테스트 코드 작성 시간이다.🌟

*파일 구조
- src > main > resources는 java파일 제외하고 모두 들어간다. (ex. html)

+----------------------------------------------------------------------------------------------------------------------------------------------+
*⌨️단축키
- 테스트
  ┗ (클래스 이름에 커서 위치) Ctrl + Shift + T
+----------------------------------------------------------------------------------------------------------------------------------------------+

*빌드 및 실행
- windows cmd 사용
  cmd 실행 → project(hello-spring) 폴더 위치로 이동 → "gradlew build" 입력 → cd bulid > libs 이동 → "java -jar hello-spring-0.0.1-SNAPSHOT.jar" 입력
 ⇒ 빌드 및 실행 완료
  (빌드에 실패할 경우, https://blog.naver.com/bkmij/223594375357 블로그 글 참고)

*Welcome Page
- main > resources > static > index.html 파일을 제일 먼저 찾는다.

*GetMapping("hello")
!! main > java > ... > controller > HelloController.java 참고
- 웹 어플리케이션에서 /hello 로 들어오면 아래 메서드를 호출해준다는 의미이다.
- 외부(웹)에서 파라미터를 받아서 사용하는 것은 동일 파일의 "hello-mvc" 부분 참고

*ResponseBody
!! main > java > ... > controller > HelloController.java / "hello-string" & "hello-api" 부분 참고
- HTTP body부에 data(name)를 넣어주겠다는 의미이다.
- template(HTML 코드) 없이 화면에 보여진다.
- "hello-api"에서 getter, setter(Generate 사용해서 생성→Alt+Insert) 을 이용해 return 할 경우, JSON 형식으로 보여진다.
 ⇒ ResponseBody가 있으면 viewResolver 대신 HttpMessageConverter가 동작한다.
    → 단순 문자이면 StringConverter가 동작한다. ("hello-string")
    → 객체이면 JsonConverter가 동작하기 때문에 Json 형식으로 바뀌게 되는 것이다. ("hello-api")

*thymeleaf
!! main > resources > templates > hello.html 참고
- th 문법 사용해서 controller data 사용 가능하다.

*테스트케이스
- junit이라는 라이브러리를 사용한다.
- Assertions 사용해서 값이 같은지 확인. 같으면 Run 왼쪽 파일 이름에 초록색 체크 아이콘, 다르면 오류를 내면서 노란 느낌표 아이콘이 뜬다.
- class에서 Run을 하면 class 내부에 있는 Test를 모두 수행한다.
- (⭐중요한 부분)@AfterEach는 하나의 테스트가 끝날때마다 실행된다.
  !! main > java > ... > repository > MemoryMemberRepository.java 파일의 clearStore 사용
   ↳ 테스트는 순서가 고정되지 않아서 순서에 따라 오류가 발생할 수 있기 때문에 하나의 테스트가 끝나면 clear를 해주어야 한다.
- 단축키 사용해서 간편하게 만들기 가능
- 메서드명 한글로 가능 (외국계와 함께 일하지 않는 이상 한글로도 많이 사용한다.)
- given → when → then (이게 주어졌을 때 → 이렇게 하면 → 이렇게 된다.)가 되어야한다.
- 예외 처리도 테스트 해줘야 한다.
- ⭐@BeforeEach 사용과 사용 이유는 test > java > ... > service > MemberServiceTest.java 파일 참고
   ⇒  각 테스트 실행 전에 호출된다. 테스트가 서로 영향이 없도록 항상 새로운 객체를 생성하고, 의존관계도 새로 맺어준다. (의존관계는 *스프링 빈과 의존관계에서 더 학습)
- @SpringBootTest : 스프링 컨테이너와 테스트를 함께 실행한다.
- @Transactional : 테스트 시작 전에 트랜잭션을 시작하고 DB에 데이터를 insert query로 넣은 후 테스트가 끝나면 ROOLBACK 해준다. (DB에 데이터가 남지 않기 때문에 다음 테스트에 영향을 주지 않는다.)

*service (폴더)
!! main > java > ... > service > MemberService.java 파일 참고
- service 클래스는 비지니스에 가까운 용어를 써야한다. (ex. join, findMembers)
   ↳ repository 클래스는 개발스럽게 용어를 쓴다. (ex. findById, findByName, findAll)

*ifPresent
!! main > java > ... > service > MemberService.java 파일 참고
- null이 아니고 어떤 값이 있다면 내부가 동작하는 것이다.
- Optional이기 때문에 가능한 것이다.
- Optional을 바로 반환하는 것을 권장하지 않는다. (주석 코드와 그 아래 코드 참고)

*스프링 빈과 의존관계 / ⭐ ⇒ 의존성 주입 (Dependency Injection, DI)
?? 스프링 빈 (빈 ⇒ 콩)
   : 스프링이 처음에 뜰 때, 스프링 컨테이너라고 통이 하나 생기는데 @Controller라는 어노테이션이 있으면 스프링이 이 Controller 객체를 보관하고 있는데,
     이럴 때, 스프링 컨테이너에서 스프링 빈이 관리된다고 표현한다.
!! main > java > ... > controller > MemberController.java 참고
- ⭐스프링 컨테이너에서 생성을 하고, 스프링 컨테이너에서 받아서 사용하도록 해야한다.
   ↳ 이유 : Controller에서 new로 계속 생성해서 사용하게 되면, 다른 Controller에서도 사용할 수 있게된다. 하지만, 여러 인스턴스를 생성할 필요없이 하나만 생성해놓고 공용으로 사용해도 되니까 스프링 컨테이너에서 한 번만 생성을 하고 받아서 사용하는 것이다.
- MemberController.java 파일에서는 MemberController가 MemberService를 의존한다.
- @Autowired
   ↳ 스프링 컨테이너가 생성될 때, @Controller가 보관되는데 그 때, Controller의 생성자가 호출이 된다. → 생성자에 @Autowired가 있으면, 생성자 매개변수에 해당하는 것을 스프링 컨테이너에서 찾아서 연결시켜 준다.
     생성자가 하나일 경우, 생략 가능하다.
- @Service
   ↳ 근데, 생성자 매개변수에 해당하는 것이 그냥 순수한 자바 클래스라면 스프링이 알 수가 없다.(스트링 빈으로 등록되어 있지 않기 때문) 그 때, @Service 어노테이션를 붙여줘야 한다.

↓⭐ 스프링은 스프링 컨테이너에 스프링 빈을 등록할 때, 기본으로 싱글톤(유일하게 하나만 등록해서 공유)으로 등록한다.
     따라서 같은 스프링 빈이면 모두 같은 인스턴스이다. (싱글톤이 아니게 설정할 수 있지만 대부분 싱글톤을 사용한다.)
*(스프링 빈을 등록하는 2가지 방법 中) 컴포넌트 스캔(@어노테이션)과 자동 의존관계(@Autowired) 설정
- 스프링이 알 수 있도록 @어노테이션 입력
  ...Controller는 @Controller
  ...Service는 @Service
  ...Repository는 @Repository
  를 입력해줘야 스프링이 알 수 있다.
- 현재 프로젝트 파일을 포함한 하위 위치들에서만 어노테이션을 붙이면 스프링 빈으로 등록되는 것이다. (현재 프로젝트 기준 ⇒ main > java > hello > hello_spring 폴더)
   ↳ 아무 위치에서나 어노테이션을 붙인다고 등록되는 것이 아니다. (기본적으로는. 따로 설정을 하면 가능하다.)

*(스프링 빈을 등록하는 2가지 방법 中) 자바 코드로 직접 스프링 빈 등록
!! main > java > hello > hello_spring > SpringConfig.java 참고
- 스프링이 뜰 때, @Configuration를 읽고 @Bean을 스프링 빈에 등록해준다.

*의존성 주입 (Dependency Injection, DI) 3가지 방법
- 결론부터 말하면, 의존관계가 실행중에 동적으로 변하는 경우는 없으므로 생성자 주입을 권장한다.
- 권장하지 않는 2가지 방법은 main > java > ... > controller > MemberController.java 주석 부분 참고
❓스프링 컨테이너, DI 관련된 깊이있는 학습은 스프링 핵심 원리 강의에서 진행된다.

*회원 가입 구현 동작 방식
!! main > java > ... > controller > HomeController.java
   & main > java > ... > controller > MemberController.java
   & main > resources > templates > home.html
   & main > resources > templates > members > createMemberForm.html
   & main > java > ... > controller > MemberForm.java                   참고
- 사용자가 localhost:8080/로 접근하면 HomeController의 @GetMapping("/")에서 home.html로 보낸다.
   → 회원 가입을 클릭하면 home.html에서 href="/members/new"로 보낸다.
   → 사용자가 localhost:8080/members/new로 접근하면 MemberController의 @GetMapping("/members/new")가 createMemberForm.html로 보낸다.
   → createMemberForm.html에서(form의 method="post") 이름 input의 name에 사용자가 화면에서 입력한 string 값이 들어가고 Enter나 등록 버튼을 클릭하면
   → MemberController의 @PostMapping("/members/new")가 호출되면서 매개변수 MemberForm로 받은 name으로 회원가입을 진행 시킨 후 홈 화면으로 redirect 시킨다.

*H2 데이터베이스 설치 및 실행
 (windows 기준. mac은 수업자료 참고)
!! project 폴더(hello-spring) > sql > ddl.sql 에 sql 관리하면서 git에 저장
- https://www.h2database.com/html/main.html
→ All Platforms (zip, 9.5 MB) 클릭해서 설치 및 압축 풀기
→ cmd로 압축 푼 h2 폴더 위치로 접근
→ h2.bat 입력해서 실행하면 h2 페이지가 웹으로 뜬다.
→ JDBC URL: 경로는 최초 한 번만 jdbc:h2:~/test 으로 해서 연결 했다가 우측상단 버튼으로 다시 나가기
→ 그 후로는 계속 JDBC URL: 경로를 jdbc:h2:tcp://localhost/~/test 으로 해서 연결하여 사용
→ 연결해서 들어가면 sql 입력하면서 DB 관리하면 된다.

*순수 JDBC
!! src > main > java > ... > repository > JdbcMemberRepository.java 파일에 작성하고
   src > main > java > ... > service > SpringConfig.java 파일 수정으로 사용 (JdbcMemberRepository)
   (SpringConfig.java 파일에서 MemoryMemberRepository()를 JdbcMemberRepository(dataSource)로 바꾼 것이 개방-폐쇄 원칙(Open-Closed Principle, OCP)이다. ⇒ java 기본 project의 study.txt파일에 OCP 필기 했었음)
- 사용하기 위한 setting
→ src > build.gradle 파일에 아래 두줄 추가
  implementation 'org.springframework.boot:spring-boot-starter-jdbc'
  implementation 'com.h2database:h2'
→ src > main > resources > application.properties 파일에 아래 두줄 추가
  spring.datasource.url=jdbc:h2:tcp://localhost/~/test
  spring.datasource.driver-class-name=org.h2.Driver
→ src > build.gradle 파일에서 코끼리 리셋(?)버튼 클릭 (Load Gradle Changes)

*JDBC Template
!! src > main > java > ... > repository > JdbcTemplateMemberRepository.java 파일에 작성하고
      src > main > java > ... > service > SpringConfig.java 파일 수정으로 사용 (JdbcTemplateMemberRepository)

*JPA
!! src > main > java > ... > domain > Member.java 파일에 어노테이션 추가
   src > main > java > ... > repository > JpaMemberRepository.java 파일 추가
   src > main > java > ... > service > SpringConfig.java 파일 수정으로 사용 (JpaMemberRepository)
- 반드시 @Transactional 필요 (src > main > java > service > MemberService.java)
