[필기장]

*파일 구조
- src > main > resources는 java파일 제외하고 모두 들어간다. (ex. html)

+----------------------------------------------------------------------------------------------------------------------------------------------+

*빌드 및 실행
- windows cmd 사용
  cmd 실행 → project(hello-spring) 폴더 위치로 이동 → "gradlew build" 입력 → cd bulid > libs 이동 → "java -jar hello-spring-0.0.1-SNAPSHOT.jar" 입력
 ⇒ 빌드 및 실행 완료
  (빌드에 실패할 경우, https://blog.naver.com/bkmij/223594375357 블로그 글 참고)

*Welcome Page
- main > resources > static > index.html 파일을 제일 먼저 찾는다.

*GetMapping("hello")
!! main > java > ... > controller > HelloController.java 참고
- 웹 어플리케이션에서 /hello 로 들어오면 아래 메서드를 호출해준다는 의미이다.
- 외부(웹)에서 파라미터를 받아서 사용하는 것은 동일 파일의 "hello-mvc" 부분 참고

*ResponseBody
!! main > java > ... > controller > HelloController.java / "hello-string" & "hello-api" 부분 참고
- HTTP body부에 data(name)를 넣어주겠다는 의미이다.
- template(HTML 코드) 없이 화면에 보여진다.
- "hello-api"에서 getter, setter(Generate 사용해서 생성→Alt+Insert) 을 이용해 return 할 경우, JSON 형식으로 보여진다.
 ⇒ ResponseBody가 있으면 viewResolver 대신 HttpMessageConverter가 동작한다.
    → 단순 문자이면 StringConverter가 동작한다. ("hello-string")
    → 객체이면 JsonConverter가 동작하기 때문에 Json 형식으로 바뀌게 되는 것이다. ("hello-api")

*thymeleaf
!! main > resources > templates > hello.html 참고
- th 문법 사용해서 controller data 사용 가능하다.

*테스트케이스
- junit이라는 라이브러리를 사용한다.
- Assertions 사용해서 값이 같은지 확인. 같으면 Run 왼쪽 파일 이름에 초록색 체크 아이콘, 다르면 오류를 내면서 노란 느낌표 아이콘이 뜬다.
- class에서 Run을 하면 class 내부에 있는 Test를 모두 수행한다.
- (⭐중요한 부분)@AfterEach는 하나의 테스트가 끝날때마다 실행된다.
  !! main > java > ... > repository > MemoryMemberRepository.java 파일의 clearStore 사용
   ↳ 테스트는 순서가 고정되지 않아서 순서에 따라 오류가 발생할 수 있기 때문에 하나의 테스트가 끝나면 clear를 해주어야 한다.

*service (폴더)
!! main > java > ... > service > MemberService.java 파일 참고
- service 클래스는 비지니스에 가까운 용어를 써야한다. (ex. join, findMembers)
   ↳ repository 클래스는 개발스럽게 용어를 쓴다. (ex. findById, findByName, findAll)

*ifPresent
!! main > java > ... > service > MemberService.java 파일 참고
- null이 아니고 어떤 값이 있다면 내부가 동작하는 것이다.
- Optional이기 때문에 가능한 것이다.
- Optional을 바로 반환하는 것을 권장하지 않는다. (주석 코드와 그 아래 코드 참고)
